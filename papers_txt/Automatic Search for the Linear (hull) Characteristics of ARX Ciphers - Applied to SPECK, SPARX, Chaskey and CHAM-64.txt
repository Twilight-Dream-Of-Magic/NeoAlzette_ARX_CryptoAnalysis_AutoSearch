Automatic Search for the Linear (hull)
Characteristics of ARX Ciphers: Applied to
SPECK, SPARX, Chaskey and CHAM-64
Mingjiang Huang1,2 , Liming Wang1
1

State Key Laboratory of Information Security, Institute of Information Engineering,
Chinese Academy of Sciences, Beijing, China
2
School of Cyber Security, University of Chinese Academy of Sciences, Beijing,
China
{huangmingjiang, wangliming}@iie.ac.cn

Abstract. Linear cryptanalysis is an important evaluation method for
cryptographic primitives against key recovery attack. In this paper, we
revisit the Walsh transformation for linear correlation calculation of modular addition, and an efficient algorithm is proposed to construct the
input-output mask space of specified correlation weight. By filtering out
the impossible large correlation weights in the first round, the search
space of the first round can be substantially reduced. We introduce a
new construction of combinational linear approximation table (cLAT) for
modular addition with two inputs. When one input mask is fixed, another
input mask and the output mask can be obtained by the Spliting-LookupRecombination approach. We first split the n-bit fixed input mask into
several sub-vectors, then, to find the corresponding bits of other masks,
and in the recombination phase, pruning conditions can be used. By
this approach, a large number of search branches in the middle rounds
can be pruned. With the combination of the optimization strategies and
the branch-and-bound search algorithm, we can improve the search efficiency for linear characteristics on ARX ciphers. The linear hulls for
SPECK32/48/64 with higher average linear potential (ALP ) than existing results have been obtained. For SPARX variants, a 11-round linear
trail and a 10-round linear hull have been found for SPARX-64, a 10round linear trail and a 9-round linear hull are obtained for SPARX-128.
For Chaskey, a 5-round linear trail with correlation of 2−61 have been
obtained. For CHAM-64, the 34/35-round optimal linear characteristics
with correlation of 2−31 /2−33 are found.
Keywords: SPECK · SPARX · ARX · Linear cryptanalysis· Linear Hull
· Automatic search · Block cipher

1

Introduction

The three components: Modular Addition, Rotation, XOR, constitute the basic operations in ARX cryptographic primitives [2]. In ARX ciphers, modular
additions provide non-linearity diffusion with efficient software implementation

2

Huang et al.

and low dependencies on computing resources. Compared with S-box based ciphers, ARX ciphers do not need to store S-box in advance, which can reduce
the occupation of storage resources, especially in resource-constrained devices.
In addition, ARX ciphers do not need to query S-boxes in the encryption and
decryption process, which can reduce a lot of query operations. Therefore, ARX
construction is prefered by many designers of lightweight ciphers. At present,
there are many primitives used this construction, such as HIGHT [12], SPECK
[1], LEA [11], Chaskey [25], SPARX [7], CHAM [13] et al..
Until now, cryptanalysis on ARX ciphers is still not well understood as Sbox based ciphers, the security analysis on them are relatively lagging behind
[29]. Linear cryptanalysis is very important for evaluating the security margin
of symmetric cryptographic primitives [21,22]. The linear approximation tables
of S-box based ciphers mostly can be constructed and stored directly, however,
the full linear approximation table of modular addition will be too large to store
when the word length of modular addition is large.
For linear cryptanalysis of ARX ciphers, one crucial step is to calculate the
linear correlation of modular addition. In [14,27,30,31], the linear properties of
the modular addition have been carefully studied. In [30], a method to calculate
the linear correlation of modular addition recursively was proposed, but the
calculation process that based on the state transition in bit level leads to high
complexity. Based on this method, only the optimal linear characterstics for the
variants of SPECK32 [32] and SPECK32/48 [10] were found.
In 2013, Schulte-Geers used CCZ-equivalence to improve the explicit formula
for the calculation of linear correlation of modular addition [28]. Based on the
improved formula and SAT solver model, Liu et al. obtained better linear characteristics for SPECK [16], the optimal linear trails for SPECK32/48/64 with
n
correlation close to the security boundary (2− 2 ) were obtained, and the 9/10
round linear hull with potential of 2−29.1 /2−32.1 for SPECK32 were obtained.
According to the position of the starting round of the search algorithm, there
are currently three types of automatic search technologies for linear/differential
cryptanalysis on ARX primitives. These are the bottom-up techniques [4,32],
top-down techniques [18,19,20], and the method of extending from the middle
to the ends [23]. In these methods, the linear correlations are directly calculated
based on the input-output masks, or by looking up the pre-computed partial
linear approximation table (pLAT) [15] or carry-bit-dependent linear approximation table (CLAT) [17,18].
High efficiency query operations can be achieved by constructing a linear
approximation table of reasonable storage size. The pLAT can store the inputoutput masks whose linear correlations are greater than a certain threshold [3,4].
When the branches cannot be queried in pLAT, and that need to be calculated
by the input-output masks, the calculation process will lead to a significant
reduction in search efficiency.
In [17,18], Liu et al. proposed the concept of carry-bit-dependent difference
distribution table (CDDT) and carry-bit-dependent linear approximation table
(CLAT). With the method of dividing the differences and linear masks of a big

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

3

modular addition into small chunks, they gave an efficient method to compute
the differential probability and linear correlation of modular addition by looking
up CDDTs and CLATs. CLAT is constructed based on the derivation from the
theorem of Schulte-Geers, and mainly obtains unknown output masks and corresponding correlation by given input masks. Combining the CLAT with Matsui’s
branch-and-bound algorithm, they got the 22/13/15/9/9-round optimal linear
trails of SPECK32/48/64/96/128 with correlation of 2−42 /2−30 /2−37 /2−22 /2−22 .
For addition modulo 2n with two inputs, the correlations need to be calculated based on the known input-output masks. Due to the existence of three-forked
branches, in most case, for input-output masks ((v, w) → u), only one input
mask v is determined, another input mask w and the output mask u are unknown. Even though all 22n space of (w, u) can be traversed in a trivial way, it’s
very time consuming. CLAT seems work, but it still needs to traverse one of the
unknown input mask. Although heuristic method can speed up the search, it
can not guarantee the results will be the best [5].This motivate us to investigate
how to efficiently index and filter possible linear mask branches.
Therefore, constructing a search model based on the precise correlation calculation formula, and realizing an efficient search for linear characteristics on
ARX ciphers is still a study worth working on. The motivation of this paper is
to investigate how to speed up the search algorithm in order to realize the search
for linear (hull) characteristics on typical ARX ciphers.
Our Contributions. In this paper, we first revisit the linear correlation calculation of modular addition, and introduce an algorithm to construct the input-out
masks of specific correlation weight. Then, we propose an improved implementation compared with CLAT in [17,18], namely combinational linear approximation
table (cLAT), which can get the other two masks based on only one fixed input
mask. Combining with these optimization strategies, we propose an automatic
algorithm to search for the optimal linear characteristics on ARX ciphers. In
the first round, we can exclude the search space of the non-optimal linear trails
by increasing the correlation weight of each modular addition monotonically. In
the middle rounds, the undetermined masks and the correlation weights of each
modular addition can be obtained by querying the cLATs, and a large number of
non-optimal branches can be filtered out during the recombination phase. Also,
the algorithm can be appropriately modified for the heuristic search.
For applications, the 9/11/14-round linear hulls of SPECK32/48/64 are obtained. For SPARX-64, the 11-round linear trail with correlation of 2−28 , and
a 10-round linear hull with ALP of 2−40.92 are found. For SPARX-128, we can
experimentally get the optimal linear trails of the first eight rounds, and we get a
10-round linear trail with correlation of 2−23 . For Chaskey, the linear characteristics cover more rounds are updated, and a 5-round linear trail with correlation
of 2−61 is found. For CHAM-64, we find a new 34-round optimal linear trail with
correlation of 2−31 . A summary table is shown in Table 1.
Roadmap. This paper is organized as follows. We first present some preliminaries used in this paper in Section 2. In Section 3, we introduce the algorithm for

4

Huang et al.

constructing the space of input-output mask tuples, the algorithm for constructing cLAT, and the improved automatic search algorithm for linear cryptanalysis
on ARX ciphers. In Section 4, we apply the new tool to several typical ARX
ciphers. Finally, we conclude our work in Section 5.
Table 1. Summary of the linear characteristics on SPECK, SPARX, Chaskey and
CHAM-64, where ‘s’,‘m’,‘h’,‘d’ represent seconds, minutes, hours, and days respectively.
Variants Round Cor TCor ALP TALP Reference
SPECK32
9
2−14 N/A 2−28
N/A
[10]
9
2−14 N/A 2−29.1 N/A
[16]
9
2−14 N/A 2−28
N/A
[18]
9
2−14 9s 2−27.78 25s This paper.
SPECK48
10 2−22 N/A 2−44
N/A
[10]
10 2−22 N/A 2−44
N/A
[16]
10 2−22 N/A 2−44
N/A
[18]
10 2−22 3.2h 2−43.64 157.3h This paper.
SPECK64
13 2−30 N/A 2−60
N/A
[10]
13 2−30 N/A 2−60
N/A
[16]
−30
−60
13 2
N/A 2
N/A
[18]
13 2−30 8.6h 2−55.29 7.3h This paper.
14 2−33 25.6h 2−61.24 5.8h This paper.
SPARX-64
10 2−22 3d 2−40.92 1h This paper.
11 2−28 5m
2−56
This paper.
SPARX-128
9
2−18 27m 2−35.22 6h This paper.
10 2−23 4.4d 2−46
This paper.
Chaskey
3
2−9 N/A 2−18
N/A
[16]
4
2−29 15.7m 2−58
This paper.
−61
−122
5
2
6.6h 2
This paper.
CHAM-64
34 2−31 N/A 2−62
N/A
[13]
34 2−31 1.1d 2−62
This paper.
35 2−33 4.8d
This paper.

2

Preliminaries

2.1

Notation

For additon modulo 2n , i.e. x  y = z, we use the symbols ≪, ≫ to indicate
rotation to the left and right, and ,  to indicate the left and right shift
operation, respectively. The binary operator symbols ⊕, ∨, ∧, ||, ¬ represent
XOR, OR, AND, concatenation, and bitwise NOT respectively. For a vector x,
wt(x) represents its Hamming weight, xi is the ith bit of it. 0 is a zero vector.
2.2

Linear Correlation Calculation for Modular Addition

Let Fn2 be the n dimensional vector space over binary field F2 = {0, 1}, for
boolean function f : Fn2 → F2 and h : Fn2 → F2 , x ∈ Fn2 , the linear correlation
between f and h can be denoted by
Cor(f, h) = 2 ×

#{x|f (x) ⊕ h(x) = 0}
− 1.
2n

(1)

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

5

For modular additon xy = z, let (v, w) be the input masks, u be the output
mask, and · be the standard inner product. According to the definition of linear
correlation, when (v · x  w · y) ⊕ u · z = 0, the linear approximation probability
is defined as
Pr(u, v, w) = 2−3n × #{(x, y, z)|(v · x  w · y) ⊕ u · z = 0}.

(2)

Let µ(t) = (−1)t , then, the linear correlation of modular addition can be
denoted by the Walsh transformation, there have
X
Cor(u, v, w) = 2−3n ×
µ((v · x  w · y) ⊕ u · z).
(3)
x,y,z∈Fn
2

Let Pr(u, v, w) = 21 + ε, where ε is the bias. When (v · x  w · y) ⊕ u · z = 1, the
linear approximation probability is Pr(u, v, w) = 12 − ε. The linear correlation
can be denoted by
Cor(u, v, w) = Pr(u, v, w) − Pr(u, v, w) = 2 Pr(u, v, w) − 1.

(4)

We call Cw(u, v, w) = − log2 Cor(u, v, w) as the correlation weight, the linear
square correlation can be denoted by
LSC(u, v, w) = Cor(u, v, w)2 = 2−2×Cw(u,v,w) .

(5)

For addition xy modulo 2n , it can be rewritten as xy = x⊕y⊕carry(x, y),
in which carry(x, y)i+1 = carry(x, y)i ⊕ xi ⊕ yi , and carry(x, y)0 = 0 for 0 ≤
i ≤ n − 1. The first order approximation is carry(x, y) = (x ∧ y)  1. If all
carry(x, y)j = 0 for j ≤ i, and 0 ≤ i ≤ n − 1, the high order approximation is
carry(x, y)i+1 =

1
|(−1)xi + (−1)yi + carry(x, y)i − (−1)xi +yi carry(x, y)i |
2

In [30], Wallén introduced the theorem to calculate the linear correlation by
analyzing the carry high order approximation function recursively. In [27], based
on the bit state transformation, the formula to calculate the correlation was
given by the following theorem.
Theorem 1 ([27]). For addition modulo 2n , let v, w be the input masks and
u be the output mask. Define an auxiliary vector d = dn−1 · · · d0 , each di =
ui ||vi ||wi ∈ F32 is an octal word, 0 ≤ i ≤ n − 1. Then, the linear correlation can
be denoted by
Cor(u, v, w) = LAdn−1 Adn−2 · · · Ad1 Ad0 C.
Where the row vector L = (1 0), the column vector C = (1 1)T , and each
2 × 2 matrice Adi is defined by




1 20
1 00
A0 =
, A1 = A2 = −A4 =
,
2 01
2 10




1 02
1 00
A7 =
, −A3 = A5 = A6 =
.
2 10
2 01

6

Huang et al.

In [28], Schulte-Geers extended Theorem 1 and derived a fully explicit formula for the linear correlation calculation, given by Theorem 2.
Theorem 2 ([28]). For addition modulo 2n with input-output mask tuple (u, v, w),
a vectorial boolean function M : Fn2 → Fn2 denotes the partial sums mapping,
x = (x0 , x1 , · · · , xn−1 ) → M (x) = (0, x0 , x0 ⊕ x1 , · · · , x0 ⊕ x1 ⊕ · · · xn−2 ).
Let z := M T (u ⊕ v ⊕ w) = (0, xn−1 , xn−1 ⊕ xn−2 , · · · , xn−1 ⊕ xn−2 ⊕ · · · x1 ),
then, the linear correlation can be denoted by
Cor(u, v, w) = 1{u⊕vz} 1{u⊕wz} (−1)v·w 2−wt(z) ,
where 1Gf is an indicator function for graph Gf := {(f (x), x)|x ∈ Fn2 }, for n-bit
vectors a and b, a  b represents ai ≤ bi for 0 ≤ i ≤ n − 1.
In [17,18], Liu et al. also introduced a theorem to compute the correlation
absolute value by splitting the theorem of Schulte-Geers, which is given bellow.
Theorem 3 ([17,18]). Let n = mt, u, v, w ∈ Fn2 , Uk = u[(k + 1)t − 1 : kt],
Vk = v[(k + 1) − 1 : kt], Wk = w[(k + 1)t − 1 : kt], 0 ≤ k ≤ m − 1, for
U, V, W ∈ Ft2 , e ∈ F2 , let
CLe (U, V, W ) = 1U ⊕V Z 1U ⊕W Z 2−wt(Z) ,
where Z = MtT (U ⊕ V ⊕ W ) ⊕ et . Let σ = u ⊕ v ⊕ w, em = 0, and ek =
L(k+1)t−1
( i=kt
σi ) ⊕ ek+1 for k = m − 1 to 0. There have,
|Cor(u, v, w)| =

m−1
Y

CLek+1 (Uk , Vk , Wk ).

k=0

In iterative ciphers, the correlation of a single r-round linear trail is the product of the correlations of each round [6]. Assuming that there are NA additions
modulo 2n with two inputs in ith round, Γin , Γout are the input and output mask
of the r-round linear trail, the correlation of it can be denoted by
Cor(Γin , Γout ) =

NA
r Y
Y

Cor(ui,j , vi,j , wi,j ).

(6)

i=1 j=1

The linear approximation of a linear hull represents the potential of all linear
trails with same input-output masks [26]. The averaged linear potential (ALP )
can be counted by the following formula (7).
ALP (Γin , Γout ) =

1 X
Cor(Γin , Γout )2 .
|K|

(7)

k∈K

Assuming that the key k is selected uniformly from the key space K, the
statistics of ALP can be formulated as (8), where T [Cw] is the number of trails

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

7

with correlation weight of Cw. Let Cmin be the correlation weight of the linear
trail whose input-output masks are choosen as the fixed input-output masks of
the linear hull. Cmax is the upper bound be searched, which should be choosen
by the trade-off between the search time and the accuracy of ALP .
ALP (Γin , Γout ) =

CX
max

2−2Cw × T [Cw].

(8)

Cw=Cmin

2.3

Linear Properties of SPECK, SPARX, Chaskey and CHAM

The SPECK family ciphers were designed by NSA in 2013 [1]. The SPARX family
ciphers were introduced by Dinu et al. at ASIACRYPT’16 [7]. In SPARX, the
non-linear ARX-box (SPECKEY) is obtained by modifying the round function
of SPECK32. The linear mask propagation properties of the round function in
SPECK and SPECKEY are shown in Fig. 1. The rotation parameters (ra , rb ) =
(7, 2) for SPECK32, while (ra , rb ) = (8, 3) for other variants.

Fig. 1. The linear masks propagation properties of SPECK and SPECKEY.

If the input-output masks (u[i], v[i], w[i]) and (u[i + 1], v[i + 1], w[i + 1]) of
the modular additions in the two consecutive rounds of SPECK are known, the
input and output masks of these two rounds can be denoted by Property 1.
Property 1. If (u[i], v[i], w[i]) and (u[i + 1], v[i + 1], w[i + 1]) are given, then there
have Γ X[i] = v[i] ≪ ra , Γ X[i + 1] = v[i + 1] ≪ ra , Γ Y [i + 1] = (v[i + 1] ≪
ra )⊕u[i], Γ Y [i] = (Γ Y [i+1] ≫ rb )⊕w[i], Γ Y [i+2] = (Γ Y [i+1]⊕w[i+1]) ≪ rb ,
and Γ X[i + 2] = Γ Y [i + 1] ⊕ u[i + 1].
The linear layer functions L/L0 [7] for SPARX-64 and SPARX-128 are shown
in Fig. 2. Due to the existence of the three-forked branches, the masks of the
linear transformation layer have the following properties.
Property 2. For SPARX-64, if the masks are transformed by the linear layer
function L, let c = Γ X2 ⊕ Γ X3 , d = c ≫ 8, there have Γ X00 = Γ X2 , Γ X10 =
Γ X3 , Γ X20 = Γ X0 ⊕ d ⊕ Γ X2 , and Γ X30 = Γ X1 ⊕ d ⊕ Γ X3 .

8

Huang et al.

Property 3. For SPARX-128, if the masks are transformed by the linear layer
function L0 , let e = Γ X4 ⊕ Γ X5 ⊕ Γ X6 ⊕ Γ X7 , f = e ≫ 8, there have Γ X00 =
Γ X4 , Γ X10 = Γ X5 , Γ X20 = Γ X6 , Γ X30 = Γ X7 , Γ X40 = Γ X0 ⊕ f ⊕ Γ X6 ,
Γ X50 = Γ X1 ⊕ f ⊕ Γ X5 , Γ X60 = Γ X2 ⊕ f ⊕ Γ X4 , and Γ X70 = Γ X3 ⊕ f ⊕ Γ X7 .

Fig. 2. (A) and (B) represent the linear layer of SPARX-64, (C) and (D) represent the
linear layer of SPARX-128.

Chaskey is a MAC algorithm introduced by Mouha et al at SAC’14 [25],
and an enhanced variant was proposed in 2015 [24], which increases the number
of permutation rounds from 8 to 12. The round function of the permutation
(v00 , v10 , v20 , v30 ) = π(v0, v1, v2, v3) is shown in Fig.3. The 4 modular additions
are labeled by A0, A1, A2, A3 respectively. The input mask (a, b, c, d) and the
output mask (a0 , b0 , c0 , d0 ) of the first round can be denoted by Property 4.
Property 4. For the permutation of Chaskey, if the input-output masks of each
modular addition in the first round are (u[i], v[i], w[i]), 0 ≤ i ≤ 3, and the corresponding correlation weight of each modular addition are c0 , c1 , c2 , c3 respectively. Hence, in the first round, there have a = v[0], b = w[0] ⊕ ((u[0] ⊕ (v[3] ≫
16))) ≫ 5, c = v[1], d = w[1]⊕(u[1]⊕v[2]) ≫ 8, a0 = u[3]⊕(u[1]⊕v[2]⊕w[3]) ≪
13, b0 = (u[0] ⊕ w[2] ⊕ w[3] ≫ 16) ≪ 7, c0 = u[2] ⊕ (w[2] ⊕ (u[0] ⊕ v[3]) ≫
16) ≪ 7, and d0 = (u[1] ⊕ v[2] ⊕ w[3]) ≪ 13. The corresponding correlation
P3
weight of the round function is Cw = i=0 ci .
CHAM is a family of lightweight block ciphers that proposed by Koo et al.
at ICISC’17, which blends the good designs of SIMON and SPECK [13]. The 3
variants of CHAM have two kinds of block size, i.e. CHAM-64 and CHAM-128.
The linear mask propagation for the 4 consecutive rounds of CHAM is shown
in Fig.4. If the input-output mask tuples of each modular addition of the first
4 rounds are given, the input and output masks of the first 4 rounds can be
deduced by Property 5.
Property 5. For CHAM, if the input-output mask tuples (u[i], v[i], w[i]) of each
modular addition of the first 4 rounds are given, 1 ≤ i ≤ 4, the input and

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

9

Fig. 3. The linear masks in the first round of Chaskey.

Fig. 4. The linear masks in the first 4 rounds of CHAM.

output masks of the first 4 rounds can be deduced by follows. Γ X00 = v[1],
Γ X10 = (w[1] ≪ 1) ⊕ v[2], Γ X20 = (w[2] ≪ 8) ⊕ v[3], Γ X30 = (w[3] ≪ 1) ⊕ v[4];
Γ X01 = v[2], Γ X11 = Γ X20 , Γ X21 = Γ X30 , Γ X31 = u[1] ≪ 8; Γ X02 = v[3],
Γ X12 = Γ X21 , Γ X22 = Γ X31 , Γ X31 = u[2] ≪ 1; Γ X03 = v[4], Γ X13 = Γ X22 ,
Γ X23 = Γ X32 , Γ X33 = u[3] ≪ 8; Γ X04 = (w[4] ≪ 8) ⊕ Γ X13 , Γ X14 = Γ X23 ,
Γ X24 = Γ X33 , Γ X34 = u[4] ≪ 1.

3

Automatic Search for the linear Characteristics on
ARX Ciphers

3.1

Input-Output Masks of Specific Correlation Weight

The number of input-output mask tuples in the first round is closely related
to the complexity of the branch-and-bound search algorithm, but traversing all
possible input masks of the first round will result in high complexity. An alternative approach is to consider the possible correlation weight corresponding to
the input-output masks, and exclude those tuples that have a large correlation

10

Huang et al.

weight. However, for a fixed correlation weight, it may correspond to multiple
input-output mask tuples, although the correlation can be calculated by Theorem 2 when the input-output masks are fixed for a modular addition.
For addition modulo 2n , its maximum correlation weight is n − 1, and the
size of the total space S of all input-output mask tuples is 23n . We can rank
the correlation weights Cw from 0 to n − 1, and construct the input-output
masks subspace SCw corresponding to correlation weight Cw, 0 ≤ Cw ≤ n − 1.
Therefore, the total space S can be divided into n subspaces, i.e
S=

n−1
[

SCw .

(9)

Cw=0

Definition 1. Let ((v, w) → u) be the input-output masks for a modular addition with non-zero correlation. Let’s define an octal word sequence Φ := {ξn−1 · · · ξ0 },
where ξi = ui ||vi ||wi ∈ F32 , for 0 ≤ i ≤ n − 1.
Definition 2. Let’s define three sets that ξi may belongs to, i.e. U0 = {1, 2, 4, 7},
U1 = {0, 3, 5, 6}, U2 = {0, 7}.
In Theorem 2, when the the correlation of a modular additon is non-zero,
the value distribution of the 3 consecutive bits in z and the 3 consecutive words
in Φ have following relationships, shown in Observation 1.
Ln−1
Observation 1. Let x = u ⊕ v ⊕ w and z i = j=i+1 xj for 0 ≤ i ≤ n − 2,
z n−1 = 0, hence, z i = z i+1 ⊕ xi+1 . For z ∈ Fn2 , assuming when z j = 0 for
n − 1 ≥ j > i + 1, or z i+2 = 0, there should have ui ⊕ vi  z i , ui ⊕ wi  z i on
bit level, it’s equivalent to ui−1 ⊕ vi−1  xi+1 ⊕ xi and ui−1 ⊕ wi−1  xi+1 ⊕ xi .
Since xi = 1 when ξi ∈ U0 , and xi = 0 when ξi ∈ U1 , there have,
if (z i+1 , z i , z i−1 ) = (0, 0, 0), then ξi+1 = 0, ξi = 0, ξi−1 = 0;
if (z i+1 , z i , z i−1 ) = (0, 0, 1), then ξi+1 = 0, ξi = 0, ξi−1 = 7;
if (z i+1 , z i , z i−1 ) = (0, 1, 0), then ξi+1 = 0, ξi = 7, ξi−1 ∈ U0 ;
if (z i+1 , z i , z i−1 ) = (0, 1, 1), then ξi+1 = 0, ξi = 7, ξi−1 ∈ U1 ;
if (z i+1 , z i , z i−1 ) = (1, 0, 0), then ξi+1 = 7, ξi ∈ U0 , ξi−1 = 0;
if (z i+1 , z i , z i−1 ) = (1, 0, 1), then ξi+1 = 7, ξi ∈ U0 , ξi−1 = 7;
if (z i+1 , z i , z i−1 ) = (1, 1, 0), then ξi+1 = 7, ξi ∈ U1 , ξi−1 ∈ U0 ;
if (z i+1 , z i , z i−1 ) = (1, 1, 1), then ξi+1 = 7, ξi ∈ U1 , ξi−1 ∈ U1 .
Hence, the value of ξi = ui ||vi ||wi depends on whether the bit positions
of z i+1 , z i are active. The last significant bits (u0 , v0 , w0 ) of the input-output
masksL
construct the value of ξ0 , which is only related to the Hamming weight of
n−1
z 0 = j=1 xj , i.e. u0 ⊕ v0  wt(z 0 ) and u0 ⊕ w0  wt(z 0 ). Therefore, if we get
the Hamming weight distribution of z, from the LSB to MSB direction, as z 0 is
determined, ξ0 can be obtained. Next, x1 = z 1 ⊕ z 0 is determined, and u1 ⊕ v1 
wt(z 1 ), u1 ⊕ w1  wt(z 1 ) should be satisfied, hence, the possible values of ξ1 can
be obtained. Recursively, all ξi can be constructed as an octal word sequence
from the LSB to MSB direction to subject to the above observation. Hence,
the tuples of (u, v, w) can be generated from the elements in Φ. The process to
construt the subspace SCw is shown in Algorithm 1, marked as Const(SCw ).

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

11

Algorithm 1 Const(SCw ): Constructing the input-output mask truples with
linear correlation weight of Cw for modular addition, 0 ≤ Cw ≤ n − 1.
Input: Cw and Λ = {λCw , ..., λ1 }. Each pattern of the Hamming weight distribution of z can be

calculated by the combinations algorithm in [9], which is the combinations pattern of n−1
Cw ,
where ξi = ui ||vi ||wi for 0 ≤ i ≤ n − 1.
1: Func LSB: i = 0. //Constructing the LSBs of u, v, w.
2: if Cw = 0 then
3:
Output the tuple of (u, v, w) with (1,1,1) or (0,0,0);
4: end if
5: if λ1 6= 0 then
6:
For each ξi ∈ U2 , c = 1, F w = 0, call Func Middle(i + 1, c, F w);
7: else
8:
For each ξi ∈ F32 , c = 2, F w = 1, call Func Middle(i + 1, c, F w);
9: end if
10: Func Middle(i, c, F w): //Constructing the middle bits of u, v, w.
11: if c = Cw then
12:
call Func MSB(i, c, F w);
13: end if
14: if λc 6= i then
15:
if F w = 0 then //F w recorded whether the value of λi−1 is 1 or not.
16:
For each ξi = 0, F w0 = 0, call Func Middle(i + 1, c, F w0 );
17:
else
18:
For each ξi = 7, F w0 = 0, call Func Middle(i + 1, c, F w0 );
19:
end if
20: else //λc = i. The value of F w determines whether ξi belongs to U0 or U1 .
21:
if F w = 0 then
22:
For each ξi ∈ U0 , F w0 = 1, call Func Middle(i + 1, c + 1, F w0 );
23:
else
24:
For each ξi ∈ U1 , F w0 = 1, call Func Middle(i + 1, c + 1, F w0 );
25:
end if
26: end if
27: Func MSB(i, c, F w): //Constructing the bits of u, v, w with position higher than λCw .
28: if λc 6= i then //The value of F w determines whether ξi equals to 0 or 7.
29:
if F w = 0 then
30:
Let ξi = 0, F w0 = 0, call Func MSB(i + 1, c, F w0 );
31:
else
32:
Let ξi = 7, F w0 = 0, call Func MSB(i + 1, c, F w0 );
33:
end if
34: else //λc = i.
35:
if F w = 0 then
36:
For each ξi ∈ U0 , ξi+1 = 7, output each tuple of (u, v, w);
37:
else
38:
For each ξi ∈ U1 , ξi+1 = 7, output each tuple of (u, v, w);
39:
end if
40: end if

3.2

The Combinational Linear Approximation Table

For addition modulo 2n , the full LAT requires a storage size of 23n , when n is
too large, it will be very difficult to store. To facilitate the storage, an intuitive
approach is to store only a part of the full LAT. In [3,4], a concept of pLAT was
introduced to store the linear correlation above a threshold. In [17,18], Liu et
al. proposed the concept of carry-bit-dependent S-box and carry-bit-dependent
linear approximation table (CLAT), which represent the truth value table and
linear approximation table of addition with carry bit. With carry-bit-dependent
S-box, they divided a big modular addition into sequential small modular additions with carry bit, turned an ARX cipher into an S-box-like cipher. They also
proposed an efficient method to compute the linear correlation of modular addi-

12

Huang et al.

tion with CLATs. CLAT can store the possible output masks and corresponding
correlations for two given input masks.
For a vector, splitting it into several sub-vectors, the Hamming weight of
this vector is the sum of the Hamming weights of its sub-vectors. In [17,18], the
correlation can be calculated by producting of the correlation of each sub-block,
correspondingly, the correlation weight is also the sum of Hamming weight of
each sub-vector of M T (u ⊕ v ⊕ w). Here, we give Corollary 1 as a practical
method to calculate the correlation weight of each sub-block of input-output
mask tuple. This idea also give birth to the delicate construction of combinatorial
LAT (cLAT). cLAT can index the unknown input masks and output masks
by one fixed input mask. cLAT stores correlation weights, while CLAT stores
correlations. Minimum correlation weights can also be generated by cLAT, which
can be used in pruning branches.
Property 6. When u ⊕ v  z and u ⊕ w  z, whcih are equivalent to (u ⊕ v) ∧
(¬((u ⊕ v) ∧ z)) = 0 and (u ⊕ w) ∧ (¬((u ⊕ w) ∧ z)) = 0.
Corollary 1. Let u, v, w ∈ Fn2 be the input-output masks of the modular addition
with non-zero correlation, let A = u ⊕ v, B = u ⊕ w, C = u ⊕ v ⊕ w, z = M T (C).
Splitting the vectors A = At−1 || · · · ||A0 , B = B t−1 || · · · ||B 0 , C = C t−1 || · · · ||C 0 ,
z = z t−1 || · · · ||z 0 into t sub-vectors respectively, n = mt, Ak , B k , C k ∈ Fm
2 ,
0 ≤ k ≤ t − 1. Then the correlation weight of the modular addition can be
denoted by
− log2 Cor(u, v, w) =

t−1 m−1
X
X

Cmk+j+1 ⊕ z mk+j+1 ,

k=0 j=0

when
Ak ∧ (¬(Ak ∧ z k )) = 0,
B k ∧ (¬(B k ∧ z k )) = 0.
Proof. wt(z) is the sum of the Hamming weight of each subvector z k , so
Pt−1
− log2 Cor(u, v, w) = k=0 wt(z k ). For C = u ⊕ v ⊕ w, the ith bit in z can be
Ln−1
denoted by z i = j=i+1 Cj = z i+1 ⊕ Ci+1 . Let 0 ≤ j < i, 0 ≤ i ≤ n − 1, the j th
Pm−1
bit in z k should be z kj = Cmk+j+1 ⊕z mk+j+1 . Hence, wt(z k ) = j=0 Cmk+j+1 ⊕
Ln−1
Ln−1
z mk+j+1 , when ui ⊕ vi  l=i+1 Cl and ui ⊕ wi  l=i+1 Cl are satisfied, i.e.
Ak ∧ (¬(Ak ∧ z k )) = 0 and B k ∧ (¬(B k ∧ z k )) = 0 for 0 ≤ k ≤ t − 1.
t
u
If the m-bit sub-vector z k+1 adjacent to z k is known, z k can be calculated
by sub-vector tuple (uk , v k , wk ) and the lowest bit of z k+1 . We call (uk , v k ,
wk ) as a sub-block, and we call the bit z (k+1)m ∈ {0, 1} as the connection status
when used in the calculation of z k . Spliting the n-bit vector z into t sub-vectors,
there should have t − 1 connection status z j , j ∈ {(t − 1)m, · · · , 2m, m}, and for
the highest sub-vector, its connection status b = 0. Hence for the hightest subblock (ut−1 , v t−1 , wt−1 ), the Hamming weight of z t−1 and the bit z (t−1)m can be
obtained, recursively, the Hamming weight of the remaining sub-vectors can also

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

13

be obtained. Therefore, as connection status b ∈ {0, 1}, and uk , v k , wk ∈ Fm
2 , we
can construct a m-bit lookup table for modular addition in advance, and query
the tables by indexing input-output masks and the connection status. In additon,
the connection status for the next sub-block can also be generated.
During the search of the middle rounds, in most case, only one input mask
is fixed (assuming it’s v), another input mask w and the output mask u are
unknown. In the lookup tables, we need to lookup all valid sub-vectors of (u, w)
that correspond to non-zero correlation based on v. The lookup table (called as
cLAT) is constructed by Algorithm 2, it takes about 4 seconds on a 2.4 GHz
CPU to generate the tables with storage size about 1.2GByte when m = 8.
Algorithm 2 Constructing the m-bit cLAT for modular addition.
1: for each b ∈ {0, 1} and input mask v ∈ Fm
2 do
2:
cLATmin [v][b] = m, let M T [k] = 0 and cLATN [v][b][k] = 0,for 0 ≤ k ≤ m − 1;
m
3:
for each input mask w ∈ F2 and output mask u ∈ Fm
2 do
4:
A = u ⊕ v, B = u ⊕ w, C = u ⊕ v ⊕ w, Cw = 0;
5:
for j = 0 to m − 1 do
6:
Cb [j] = (C  (m − 1 − j)) ∧ 1;
7:
end for
8:
if b = 1 then //Determining the connection status generated by the upper sub-block.
9:
Cw++, M T [0] = 1, Z = 1  (m − 1);
10:
else
11:
M T [0] = 0, Z = 0;
12:
end if
13:
for i = 1 to m − 1 do //Determining the correlation weight.
14:
M T [i] = (Cb [i − 1] + M T [i − 1]) ∧ 1;
15:
if M T [i] = 1 then
16:
Cw++, Z = Z ∨ (1  (m − 1 − i));
17:
end if
18:
end for
19:
F1 = A ∧ (¬(A ∧ Z)), F2 = B ∧ (¬(B ∧ Z)); //Property 6.
20:
if F1 = 0 and F2 = 0 then //Judgment conditions u ⊕ v  z and u ⊕ w  z.
21:
cLATw [v][b][cLATN [v][b][Cw]] = w;
22:
cLATu [v][b][cLATN [v][b][Cw]] = u;
23:
cLATN [v][b][Cw]]++; //The number of tuples correspond to v and b.
24:
cLATb [u][v][w][b] = (MT [m − 1] + Cb [m − 1]) ∧ 1; //Connection status.
25:
if cLATmin [v][b] > Cw then
26:
cLATmin [v][b] = Cw; //The minimum correlation weight correspond to v, b.
27:
end if
28:
end if
29:
end for
30: end for.

3.3

Spliting-Lookup-Recombination

Like looking up the CLAT in [17,18], this section describes how to use our cLAT.
When one input mask is fixed, we can get another input mask, the output mask
and the corresponding correlation weight by the Splitting-Lookup-Recombination
approach, which contains three steps.
Spliting. For addition modulo 2n , n = mt, if one of the two input masks v
is fixed, then splitting v into t m-bit sub-vectors. The larger m, the fewer times
to lookup cLAT and the fewer number of bit concatination operation, but more
space the memory takes up. If the input-output mask tuple is divided into several
m-bit blocks, the storage space of cLAT needed is about 23(m−8) × 1.2GB.
Lookup. From the MSB to the LSB direction, querying the sub-vectors of
(u, w) that correspond to each sub-vector of v and the corresponding correlation

14

Huang et al.

weights, where the correlation weights of each sub-vectors increase monotonically. For the highest m-bit sub-vector v t−1 , its connection status b = 0, looking
up cLAT to get wt−1 , ut−1 , the corresponding correlation weight c[t − 1], and
the connection status for the sub-vector v t−2 . Similarly, other sub-vectors of u,
w and the corresponding correlation weights can also be indexed.
Recombination. All sub-vectors of u and w can be obtained by looking
up cLAT, and the n-bit u and w can be obtained by bit concatenation. The
correlation weight ofP
the modular addition is the sum of the weight of each
t−1
sub-block, i.e. Cw = k=0 c[k].
When there are multiple modular additions in the round function, i.e. NA >
1, for each modular additon, its undetermined input mask and output mask need
to be obtained by the Splitting-Lookup-Recombination approach respectively.
In the lookup phase, a total of tNA lookup operations
required. And the
PNA Pare
t−1
correlation weight of the round function is Cw = j=1
k=0 cj [k].
For each sub-vector v k , the possible minimum linear correlation weight corresponding to it can be calculated in advance by Algorithm 2, that is,
c[k]min = min(cLATmin [v k ][0], cLATmin [v k ][1])

(10)

During the Recombination phase, the correlation boundary can be constructed by the associated weights that have been obtained and the possible minimum
correlation weights, shown in Corollary 2.
Corollary 2. For additon modulo 2n , one of the input mask v = v t−1 || · · · ||v 0
n
is fixed, n = mt, v k ∈ Fm
2 , and 0 ≤ k ≤ t − 1. For any u, w ∈ F2 of non-zero
correlation, the correlation boundary should have,
Cor(u, v, w) ≤ Cor(ut−1 || · · · ||uk , v t−1 || · · · ||v k , wt−1 || · · · ||wk ) + 2−

Pk−1

j=0 c[j]min

.

Proof. The correlation of modular addition is the Q
product of the correlation
t−1
of each sub-block after splitting, i.e. Cor(u, v, w) = k=0 Cor(uk , v k , wk ). Let
Pt−1
t−1
k t−1
k
t−1
k
− log2 Cor(u || · · · ||u , v || · · · ||v , w || · · · ||w ) = l=k c[l] be the correlation weight of the sub-vector tuples that are obtained by lookup tables. The
sum of the correlation P
weights of the sub-vector tuples haveP
not been looked up
k−1
t−1
yet, which should s.t. j=0 c[j]min ≤ − log2 Cor(u, v, w) − l=k c[l].
t
u
k
k
k
Assuming the number of (u , w ) corresponding to each sub-vector v is Xk ,
hence,
Qt−1 the number of mask branches corresponding to the modular addition is
k=0 Xk . Corollary 2 can be used to filter out (u, w) of large correlation weight.
3.4

Improved Automatic Search Algorithm

In [3,4], Biryukov et al. proposed a framework of threshold search for ARX ciphers. In their search framework, a concept of pDDT was introduced to lookup
the possible output differences of fixed input differences with probabilities above
a threshold. Similiarly, the concept of partial linear approximation table (pLAT)
was also ultilized in the search for linear characterstics of ARX ciphers. In [8],

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

15

pLAT was used in searching for the linear characterstics of ARX ciphers combined with some heuristic strategies, though the results can not be guaranteed
as the optimal ones.
In [32], Yao et al. appplied the top-down and bottom-up methods to search for
linear characterstics of ARX ciphers. By combining Wallén’s theorem and banchand-bound framework, they got the full-round optimal linear trail of SPECK32,
and the 7/5/4/4 rounds best linear trails of SPECK48/64/96/128 respectively.
In [20], Liu et al. introduced a search framework to search for SIMON’s
optimal linear trails. In [17,18], Liu et al. proposed an automatic search algorithm
for optimal linear characteristics in ARX ciphers. Their algorithm was based
on Matsui’s branch-and-bound approach and the theorem of Schulte-Geers, by
looking up CLATs to get all possible output masks and their linear correlations
when computing the linear correlations of modular addition.
Inspired by these search tools, we will combine some optimization strategies
to build an efficiently automatic tool for improving the search efficiency, especially for searching the linear hulls of ARX ciphers. We take the first round as the
starting point of the search process. In the first/second rounds, the input-output
mask tuples of each modular addition with correlation weight increase monotonically can be obtained by Algorithm 1. In the middle rounds, for each modular
addition, u and w can be obtained by the Spliting-Lookup-Recombination approach. Algorithm 3 takes SPECK as an example.
Let the optimal correlation weight of the (r − i)th round that has been obtained be Bcr−i , 1 ≤ i ≤ r − 1, and let the expected r-round correlation weight
be Bcr . The correlation weight of the first two rounds should subject to Matsui’s
pruning condition, i.e. Cw1 + Bcr−1 ≤ Bcr and Cw1 + Cw2 + Bcr−2 ≤ Bcr .
PNA0
Let i=1
Cwi = Bcr − Bcr−1 , NA0 is the number of additions in the first
two rounds, then the search space need to be constructed is no more than (11).
When the block size of a ARX cipher is large, let n be the word size of the
modular additon, the total input-output masks of all NA0 modular additons in
0
the first two round is S 0 = 23n×NA . Therefore, when the value of Bcr − Bcr−1
is small, the search space S will be much smaller than S 0 intuitively.
0

S=

NA Cwi
Y
X

#{(u, v, w)| − log2 Cor(u, v, w) = c}.

(11)

i=1 c=0

Flexible search scenario settings. Combining Algorithm 1, cLAT, pruning
conditions and the properties of the target ciphers in Section 2.3, Algorithm 3
can be adapted to the following search scenarios with appropriate modifications.
Scenario 1: For some ARX ciphers, such as SPARX and Chaskey, the number of modular additions in the round function
more than 1, NA > 1. Hence
Pis
NA
the correlation weight of each round is Cwi = j=1
Cwij , Cwij is the correlation
th
th
weight of the j addition in the i round. In the first/second round, the inputoutput masks of each modular addition should be generated by Algorithm 1. In
the middle rounds, the tuple (u, w) of each modular addition should be obtained
by calling LR(v) multiple times.

16

Huang et al.

Algorithm 3 Automatic search for the optimal linear trails of ARX ciphers,
and take the application to SPECK as an example, where n = mt.
Input: The cLAT is pre-computed and stored by Algorithm 2. Bw1 , · · · , Bwr−1 have been recorded
1: Program entry:
2: Let Bcr = Bcr−1 − 1, and Bcr = null //Bw1 can be derived manually for most ARX ciphers..
3: while Bcr 6= Bcr do
4:
Bcr + +; //The expected r-round correlation weight increases monotonously.
5:
Call Procedure Round-1;
6: end while
7: Exit the program.
8: Round-1: //Exclude the search space with correlation weights larger than Bcr − Bcr−1 .
9: for Cw1 = 0 to n − 1 do //Cw1 increases monotonously.
10:
if Cw1 + Bcr−1 > Bcr then
11:
Return to the upper procedure with FALSE state;
12:
else
13:
Call Algorithm 1 Const(SCw1 ), and traverse each output tuple (u1 , v1 , w1 );
14:
if call Round-2(u1 , v1 , w1 ) and the return value is TRUE, then
15:
Stop Algorithm 1 and return TRUE; //Record the optimal linear trail be found.
16:
end if
17:
end if
18: end for
19: Return to the upper procedure with FALSE state;
20: Round-2(u1 , v1 , w1 ): //Exclude the correlation weights larger than Bcr − Bcr−1 − Cw1 .
21: for Cw2 = 0 to n − 1 do //Cw2 increases monotonously.
22:
if Cw1 + Cw2 + Bcr−2 > Bcr then
23:
Return to the upper procedure with FALSE state;
24:
else
25:
Call Algorithm 1 Const(SCw2 ), and traverse each output tuple (u2 , v2 , w2 );
26:
y = (u1 ⊕ (v2 ≪ ra ) ⊕ w2 ) ≪ rb , x = u2 ⊕ y; //(ra , rb ): rotation parameters.
27:
if call Round-r(3, x, y) and the return value is TRUE, then
28:
Stop Algorithm 1, compute the masks of the first/second round and return TRUE;
29:
end if
30:
end if
31: end for
32: Return to the upper procedure with FALSE state;
33: Round-r(i, x, y): //Middle rounds, 3 ≤ i ≤ r.
34: v = x ≫ ra , and let v = vt−1 || · · · ||v0 and vk ∈ Fm
//Spliting v.
2 , 0 ≤ k ≤ t − 1;
35: Call LR(v), traversing each u and w; //Where Cwi = Cor(v, w, u).
36: if i = r and Cw1 + ... + Cwi−1 + Cwi = Bcr then //The last round.
37:
Let Bcr = Bcr , break from LR(v) and return TRUE;
38: end if //r-round optimal linear trail of expected correlation weight Bcr have been found.
39: y0 = (y ⊕ w) ≪ rb , x0 = y0 ⊕ u;
40: if call Round-r(i + 1, x0 , y0 ) and the return value is TRUE, then
41:
Break from LR(v) and return TRUE; //Record the masks of each round and return.
42: end if
43: Return to the upper procedure with FALSE state;
44: LR(v): //Looking up cLAT and recombining another input mask w and the output mask u.
45: Let c[k]min = min(cLATmin [vk ][0], cLATmin [vk ][1]), and b[k] = 0, for 0 ≤ k ≤ t − 1;
46: for k = t − 1 to 0 do //From MSB to LSB direction.
do //ct−1
= m − 1 and ck
47:
for ci [k] = cLATmin [v k ][b[k]] to ck
i P
i
i = m for 0 ≤ k ≤ t − 2.
Pi−1
Pk−1
t−1
48:
if
Cw
+
c[j]
+
c
[l]
+
Bcr−i ≤ Bcr then //Corollary 2.
g
min
i
g=1
j=0
l=k
49:
for Xk = 0 to cLATN [v t−1 ][b[k]][ci [k]] − 1 do
50:
uk = cLATu [v k ][b[k]][Xk ]; //Querying uk and wk .
51:
wk = cLATw [v k ][b[k]][Xk ];
52:
b[k − 1] = cLATb [uk ][v k ][wk ][b[k]]; //Record the next connection status.
53:
if k = 0 then //Recombining u and w.
Pt−1
54:
Output each u = ut−1 || · · · ||u0 , w = wt−1 || · · · ||w0 , and Cwi =
k=0 ci [k];
55:
end if
56:
end for
57:
end if
58:
end for
59: end for

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

17

Scenario 2: The linear hulls can also be searched by simply modifying Algorithm 3. For an obtained optimal linear trail, fixing the input mask of the first
round and the output mask of the last round, calling Round-r(i, x, y) directly and modifying Bcr to the expected maximum statistical correlation weight
Cmax . Therefore, for ALP , all linear trails with linear correlation weight between
the optimal correlation weight Cmin and Cmax can be counted.
Scenario 3: When the number of rounds of a linear trail or the block size
is large, the linear correlation tend to be very small, and the search process will
be very time-consuming. Hence, good linear characteristics results under certain
conditions can be explored by the heuristic search settings. We can exclude
a large number of search branches and reduce the search complexity by these
methods, such as starting the search from a desired large correlation weight Bcr ,
fixing the input mask of a certain round, and limitting the correlation weight of
a round or a certain modular addition.

4

Applied to SPECK, SPARX, Chaskey and CHAM-64

4.1

The Linear Hulls for SPECK32/48/64

Applying Algorithm 3, the optimal linear trails for SPECK32/48/64 with corn
relation close to 2− 2 can be obtained, shown in Table 2. Fixed the input and
output masks, the ALP of the linear hulls obtained by the cluster experiment
are given in Table 3. For SPECK64, a new 14-round linear hull with average
linear potential of 2−61.24 have been found.
When search for the linear hulls, we need modify Algorithm 3 to adapt to
Scenario 2. We use formula (8) to count ALP , where Cmin ≤ Cw ≤ Cmax , Cmin
is the correlation weight of the linear trail we choose to use to pin the input and
output masks, and Cmax is the maximum correlation weight we limit our search.
In the middle rounds, we adopt Cmax to instead Bcr for filtering out those trails
that contribute less to the ALP .
Table 2. The 9/10/13 round optimal linear trails for SPECK32/48/64.
SPECK32
SPECK48
SPECK64
Γ Xr Cwr
Γ Xr
Cwr
Γ Xr
Cwr
0 00A0062F 1 000180B80001 1 0100012014010021 2
1 78B818B9 4 000000C00001 0 0001810020000101 1
2 00906021 1 00000E00000E 2 0000010000000001 0
3 60804081 1 7A0070700070 5 0000000100000000 1
4 00800001 0 C2C080829380 6 0D0000000C000000 2
5 00010000 1 D00000108300 2 60610000606C0000 3
6 0B000800 3 800000809800 1 00024D0300620C03 6
7 20402050 2 00000400C004 1 181070141B107358 6
8 008380C3 1 200020260020 2 0013001818031840 3
9 170B130A - 013100310100 2 1818000000181200 2
10
8800A8880109 - 0018000000001000 1
11
0000100000000000 1
12
0000009800000080 2
13
5000040480000404 r

18

Huang et al.
Table 3. The linear hulls for SPECK32/48/64.
2n r Γ in
Γ out
Cmin Cmax ALP
#trails Time Reference
32 9 0380,5224
066A,0608
14
14
2−28
1
N/A [10]
9 0010,1400
0B00,0800
15
25
2−29.1 69737 N/A [16]
9 0280,5226
06CF,068C
14
14
2−28
1
N/A [18]
9 00A0,062F
170B,130A
14
20
2−27.78 14
25s
This paper.
−44
48 10 000131,050021
2484F2,2480F6
22
22
2
1
N/A [10]
−44
10 800121,158021
DE84DC,C684DC
22
22
2
1
N/A [16]
10 000900,20018C
212000,012000
22
22
2−44
1
N/A [18]
10 000180,B80001
8800A8,880109
22
28
2−43.64 50
157.3h This paper.
64 13 18600010,10724800 00024982,00420802 30
30
2−60
1
N/A [10]
13 00101800,00001812 00006065,00006068 30
30
2−60
1
N/A [16]
−60
13 00101000,00001013 4D030123,C0300143 30
30
2
1
N/A [18]
13 01000120,14010021 50000404,80000404 30
32
2−55.29 178
7.3h
This paper.
14 01000120,14010021 26902000,20802006 33
35
2−61.24 194
5.8h
This paper.

All experiment code in this work are run on a single high performance server
with Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz. All masks are represented
in hexadecimal. In Table 3, we use the formula (5) to get the ALP of the optimal
linear trails in the previous work.
4.2

The Linear Characteristics for SPARX

Searching for the optimal linear trails of SPARX variants, Algorithm 3 need
to be modified to fit Scenario 1. There are multiple modular additions in each
round, NA = 2 for SPARX-64, and NA = 4 for SPARX-128. Hence, for all
2NA additions modulo 216 in the first/second rounds, call Algorithm 1 for each
addition to generate its input-output mask tuples, then applying Property 3/4
to obtain the masks of the first two rounds for SPARX-64 and SPARX-128
respectively. In the middle rounds, the Spliting-Lookup-Recombination method
is applied to obtain possible input masks and output masks of each addition,
as well as correlation weight. The 10-round optimal linear trails for SPARX-64
are listed in Table 4, and the 11-round linear trail is obtained by limitting the
correlation weight of each modular addition less than 3 in the first two rounds.
Fixed the input and output mask of the 10-round optimal linear trail, a 10-round
linear hull with ALP of 2−40.92 is obtained.
For SPARX-128, the first 8 rounds optimal linear trails can be derived from
the first 8 rounds optimal linear trails of SPECK32 when considering the minimum active ARX-box. The experiment results in Table 5 confirmed the derivation. Based on Scenario 3, we limit the correlation weight of each modular addition in the first/second round to less than 2, then we get the 9/10-round linear
trails with correlation weight of 18/23. Although the 9/10-round linear trail cannot be guaranteed as the best, they can still be used to get the 9/10-round linear
hulls with the corresponding ALP of 2−35.22 /2−46 .
The 11/10-round linear trails for SPARX-64/SPARX-128 are given by Table
6. crj represents the correlation weight of the j th modular addition in the rth
round, Cwr represents the correlation weight of the rth round, 0 ≤ j < NA .

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

Table 4. The linear characteristics for SPARX-64.
r Cw Ttrail
Γ in
Γ out
Cmin Cmax ALP #trails TALP
1
0
0s 0000 0000 0080 4001 0000 0000 0000 0001
0
0
1
1
0s
2
0
0s 0000 0000 0080 4001 0000 0000 0004 0004
0
0
1
1
0s
−2
3
1
0s 0000 0000 0080 4001 2C10 2010 2C1C 201C
1
10
2
1
0s
−6
3
0s 0090 6021 0000 0000 0000 0000 0B00 0800
3
10
2
1
0s
4
5
5
0s 00A0 3021 0000 0000 0000 0000 85C2 8442
5
10
2−9.98
3
3s
7
0s 0080 5021 0000 0000 4285 4284 4385 4384
7
15 2−13.91
11
22s
6
7 11 3.2m 0090 6021 0000 0000 170B 130A 17CF 130F 11
17 2−21.87
5
9s
8 15 4.6h 0880 503D 0090 6021 0000 0000 0E81 1EB0 15
20 2−29.73
22
2m
−35.97
9 19 48.6h 0080 5021 2000 0058 2058 2040 3858 3840 19
25 2
1215 28.7h
10 22
3d 0080 4001 00C0 F001 0205 0204 0205 0204 22
25 2−40.92
144
1h
28
2−56
1
11 ≤ 28 5m 0080 4001 00C0 F001 38A8 2080 2058 2040 28

Table 5. The linear characteristics for SPARX-128.
r Cw
1 0

Ttrail Γ in
Γ out
Cmin Cmax ALP
#trails Thull
0s
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0080 4001 0000 0000 0000 0001 0
0
1
1
0s
2 0
0s
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0080 4001 0000 0000 0004 0004 0
0
1
1
0s
3 1
0s
0000 0000 0000 0000 0000 0000 0000 0000
−2
0000 0000 0080 4001 0000 0000 2C10 2010 1
3
2
1
0s
4 3
0s
0000 0000 0000 0000 0000 0000 0B00 0800
0000 0000 0090 6021 0B03 0003 0003 0803 3
10
2−6
1
0s
5 5
2s
0000 0000 00A0 3021 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 85C2 8442 5
10
2−9.98 3
0s
6 7
1s
0000 0000 0080 5021 0000 0000 0000 0000
−13.91
0000 0000 0000 0000 0000 0000 4285 4284 7
12
2
3
1s
7 9
4s
0000 0000 0090 6021 0000 0000 0000 0000
−17.78
0000 0000 0000 0000 0000 0000 170B 130A 9
15
2
5
13s
8 12
13d
0000 0000 0081 1381 0000 0000 170B 130A
0000 0000 0000 0000 160F 0104 0104 120E 12
18
2−23.65 11
101s
9 ≥ 14 0000 0000 0000 4020 0000 0000 0215 0012
≤ 18 27m 0000 0000 0000 0000 0813 0814 0A06 0806 18
22
2−35.22 53
6h
10 ≥ 18 0000 0000 0080 4001 0000 0000 0B81 0800
−46
≤ 23 4.4d 0000 0000 0000 0000 0984 0A04 0205 0204 23
23
2
1
-

Table 6. The 11/10-round linear trails for SPARX-64/SPARX-128.
11-round trail for SPARX-64
10-round trail for SPARX-128
r Γ X0r || · · · ||Γ X0r cr0 cr1 Cwr r
Γ X0r ||Γ X1r || · · · ||Γ X6r ||Γ X7r
cr0 cr1 cr2 cr3 Cwr
1 0080400100C0F001 0 1
1
1 00000000000402000000000000000000 0 0 0 0
0
2 000000010000C001 0 0
0
2 00000000081008100000000000000000 0 1 0 0
1
3 0004000400070007 1 2
3
3 000000000C010E000000000000000000 0 3 0 0
3
L 2C1020102C1C201C - 4 00000000364834500000000000000000 0 5 0 0
5
0
4 2C1C201C00000000 4 0
4 L 00000000008A90E20000000000000000 - - - 5 3140013000000000 3 0
3
5 000000000000000000000000008A90E2 0 0 0 2
2
6 858D05CF00000000 4 0
4
6 000000000000000000000000078F138E 0 0 0 4
4
L 60117B1800000000 - 7 000000000000000000000000000E1600 0 0 0 2
2
7 0000000060117B18 0 4
4
8 00000000000000000000000000001800 0 0 0 0
0
0
8 0000000000812261 0 3
3 L 00000000000000000000000060006000 - - - 9 0000000080018280 0 1
1
9 00000000600060006000000000006000 0 1 1 0
2
L 0000000000020202 - - 10 00000000828182010280020080018001 0 2 1 1
4
10 0002020200000200 1 0
1 11 0000000002150012081308140A060806 - - - 11 1E08180808000800 3 1
4
12 38A8208020582040 - -

19

20

4.3

Huang et al.

The Linear Characteristics for Chaskey

Shown in Table 7, the correlation weights of the first 3 rounds optimal linear
trails of Chaskey we have found are 0/2/9. For one round optimal linear trail
with correlation weight 0, whose input-output masks represented in hexadecimal
are (1,1,0,0) and (0,80,800000,0). To find the linear trails with longer rounds, we
use a heuristic approach in Scenario 3, limitting the correlation weight of each
modular additions in the first round to less than 2, and setting the correlation
weight to the expected values to start the heuristic search. The 4/5-round linear
trails with correlation weights of 29/61 are obtained. The details of the linear
trails are listed in Table 8.

Table 7. The correlation of the linear trails for Chaskey.
Round
1 2 3
4
5
Reference
Correlation 2−1 2−2 2−9
[16]
Correlation 1 2−2 2−9 ≥ 2−29 ≥ 2−61 This paper.

Table 8. The linear trails for Chaskey.
3 round with Cor = 2−9
a, b, c, d
cr0 cr1 cr2 cr3
1,8100001,201,303
0 1 0 1
300,1,0,0
5 0 0 0
0,10000,1,0
0 0 1 1
240030,10008080,81011000,240000
- - - −29
−61
4 round with Cor = 2
5 round with Cor = 2
r r r r
r
a, b, c, d
c 0 c1 c2 c3
a, b, c, d
cr0 cr1 cr2 cr3
0
0,800,90001,10D0801
0 2 1 0
1,8100001,201,303
0 1 0 1
1
0,0,1,1
0 0 0 0
300,1,0,0
5 0 0 0
0,80,810000,0
0 2 3 1
0,10000,1,0
0 0 1 1
2
18001A20,80880040,400189,1A20
5 3 7 5
240030,10008080,81011000,240000
4 4 6 6
3
4 2D224005,A83F0DA8,2DA1C86D,25004107 - - - - 50E73286,8241A0,5161469B,40D436A6 10 12 4 6
BAAE7E16,76224512,65104022,3EA61E37 - - - 5
r
0
1
2
3

2 round with Cor = 2−2
a, b, c, d
cr0 cr1 cr2 cr3
2000001,B100001,1,1
1 0 0 0
0,1,0,0
0 0 0 1
300004,1000,10000000,4
- - - -

Table 9. The correlation weights of the optimal linear trails for CHAM-64.
Round 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
Cw 0 0 0 0 0 0 0 1 2 3 3 4 5 6 7 9 10 12
Round 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
Cw 14 16 17 18 20 21 22 23 25 26 26 26 27 28 29 31 33

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

4.4

21

The Linear Characteristics for CHAM-64

In the first 4 rounds of CHAM, the input-output mask tuples of each modular
additions can be constructed by Algorithm 1, and all input and output masks for
the first 4 rounds are deduced by Property 5. In the forward search process, the
Spliting-Lookup-Recombination approach is adopted to determine the possible
unknown input masks and output masks for the modular addition in each round.
In [13], for CHAM-64, a 34-round linear trail with bias of ε = 2−31 was given.
The correlation weights of the optimal linear trails obtained by us are shown in
Table 9. The correlation of the 34-round optimal linear trail we find is 2−31 , and
the details of the 35-round optimal linear trail with correlation of 2−33 is listed
in Table 10.
Table 10. The 35-round optimal linear trail for CHAM-64.
r Γ X0r || · · · ||Γ X3r Cwr r Γ X0r || · · · ||Γ X3r Cwr
1 0000000000018000 0 19 0007010380C08000 1
2 0000000180000000 0 20 810080C080000700 2
3 0001800000000000 0 21 0001800007000201 0
4 0000000000000100 0 22 0000070002010100 0
5 0000000001000000 0 23 0700020101000000 2
6 0000010000000000 0 24 0001010000000006 0
7 0100000000000000 1 25 0000000000060002 0
8 00C0000000000001 1 26 0000000600020000 0
9 8000000000010100 1 27 0006000200000000 1
10 40000001010000C0 1 28 0000000000000400 0
11 0061010000C08000 1 29 0000000004000000 0
12 812000C080004100 4 30 0000040000000000 0
13 0041800041008201 1 31 0400000000000000 1
14 0030410082014100 3 32 0200000000000006 1
15 6500820141000060 3 33 0002000000060600 1
16 A0C1410000600047 3 34 0001000606000200 0
17 C080006000470103 2 35 0106060002000002 2
18 60000047010380C0 1 36 0682020000028401 -

5

Conclusions

In this paper, we have improved the automatic search algorithm for the linear
characteristics on ARX ciphers. Combining with the optimization strategies of
constructing the input-output masks correspond to specific correlation weight
and the novel construction of cLAT, this search tool enables an efficient search
for the linear characteristics on typical ARX ciphers. Applying this tool, we
get new 9/10/14-round linear hulls for SPECK32/48/64, the ALP are 2−27.78 ,
2−43.64 and 2−61.24 respectively. For SPARX-64, a 10-round optimal linear trail
with correlation of 2−22 , and a 11-round good linear trail with correlation of 2−28

22

Huang et al.

have been obtained. For SPARX-128, a 10-round linear trail with correlation of
2−23 is obtained. The linear cryptanalysis results on SPARX are presented for
the first time so far. For Chaskey, the linear characteristic results have been
updated, which cover more rounds than the existing results. For CHAM-64, the
linear characterstics we obtained are the first third-party linear cryptanalysis
results. In addition, we believe that these improved optimization strategies can
also be achieved to linear cryptanalysis on other ARX ciphers.
Acknowledgements. The authors will be very grateful to the anonymous referees for their helpful comments and suggestions. This work was supported by
the National Key Research and Development Program of China (No. 2017YFB0801900).

References
1. Beaulieu, R., Shors, D., Smith, J., Treatman-Clark, S., Weeks, B., Wingers, L.: The
simon and speck families of lightweight block ciphers. Cryptology ePrint Archive,
Report 2013/404 (2013), https://eprint.iacr.org/2013/404
2. Biryukov, A., Perrin, L.: State of the art in lightweight symmetric cryptography.
IACR Cryptology ePrint Archive 2017, 511 (2017)
3. Biryukov, A., Velichkov, V.: Automatic search for differential trails in arx ciphers.
In: Benaloh, J. (ed.) Topics in Cryptology – CT-RSA 2014. pp. 227–250. Springer
International Publishing, Cham (2014), http://eprint.iacr.org/2013/853
4. Biryukov, A., Velichkov, V., Le Corre, Y.: Automatic search for the best trails
in arx: application to block cipher speck. In: International Conference on Fast
Software Encryption. pp. 289–310. Springer (2016)
5. Bodden, D.: Linear cryptanalysis of reduced-round speck with a heuristic approach:
Automatic search for linear trails. In: Information Security - 21st International
Conference, ISC 2018, Guildford, UK, September 9-12, 2018, Proceedings. pp. 132–
150 (2018), https://doi.org/10.1007/978-3-319-99136-8 8
6. Daemen, J., Govaerts, R., Vandewalle, J.: Correlation matrices. In: Fast Software
Encryption: Second International Workshop. Leuven, Belgium, 14-16 December
1994, Proceedings. pp. 275–285 (1994), https://doi.org/10.1007/3-540-60590-8 21
7. Dinu, D., Perrin, L., Udovenko, A., Velichkov, V., Großschädl, J., Biryukov, A.:
Design strategies for arx with provable bounds: Sparx and lax. In: International
Conference on the Theory and Application of Cryptology and Information Security.
pp. 484–513. Springer (2016), https://doi.org/10.1007/978-3-662-53887-6 18
8. Dwivedi, A.D., Morawiecki, P.: Differential cryptanalysis of round-reduced speck.
Cryptology ePrint Archive, Report 2018/899 (2018), https://eprint.iacr.org/2018/
899
9. Ehrlich, G.: Loopless algorithms for generating permutations, combinations, and
other combinatorial configurations. J. ACM 20(3), 500–513 (1973), https://doi.
org/10.1145/321765.321781
10. Fu, K., Wang, M., Guo, Y., Sun, S., Hu, L.: Milp-based automatic search algorithms
for differential and linear trails for speck. In: Fast Software Encryption - 23rd International Conference, FSE 2016, Bochum, Germany, March 20-23, 2016, Revised Selected Papers. pp. 268–288 (2016), https://doi.org/10.1007/978-3-662-52993-5 14

Automatic Search for the Linear (hull) Characteristics of ARX Ciphers

23

11. Hong, D., Lee, J., Kim, D., Kwon, D., Ryu, K.H., Lee, D.: LEA: A 128-bit block
cipher for fast encryption on common processors. In: Information Security Applications - 14th International Workshop, WISA 2013, Jeju Island, Korea, August
19-21, 2013, Revised Selected Papers. pp. 3–27 (2013)
12. Hong, D., Sung, J., Hong, S., Lim, J., Lee, S., Koo, B.S., Lee, C., Chang, D., Lee,
J., Jeong, K., et al.: Hight: A new block cipher suitable for low-resource device. In:
International Workshop on Cryptographic Hardware and Embedded Systems. pp.
46–59. Springer (2006), https://doi.org/10.1007/11894063 4
13. Koo, B., Roh, D., Kim, H., Jung, Y., Lee, D., Kwon, D.: CHAM: A family of
lightweight block ciphers for resource-constrained devices. In: Information Security
and Cryptology - ICISC 2017 - 20th International Conference, Seoul, South Korea,
November 29 - December 1, 2017, Revised Selected Papers. pp. 3–25 (2017)
14. Lipmaa, H., Wallén, J., Dumas, P.: On the additive differential probability of
exclusive-or. In: Fast Software Encryption, 11th International Workshop, FSE
2004, Delhi, India, February 5-7, 2004, Revised Papers. pp. 317–331 (2004)
15. Liu, Y., Fu, K., Wang, W., Sun, L., Wang, M.: Linear Cryptanalysis of ReducedRound SPECK. Inf. Process. Lett. 116(3), 259–266 (2016), https://doi.org/10.
1016/j.ipl.2015.11.005
16. Liu, Y., Wang, Q., Rijmen, V.: Automatic Search of Linear Trails in ARX with Applications to SPECK and Chaskey. In: Applied Cryptography and Network Security - 14th International Conference, ACNS 2016, Guildford, UK, June 19-22, 2016.
Proceedings. pp. 485–499 (2016), https://doi.org/10.1007/978-3-319-39555-5 26
17. Liu, Z.: Automatic Tools for Differential and Linear Cryptanalysis of ARX Ciphers.
University of Chinese Academy of Science, Phd Thesis. In Chinese (2017)
18. Liu, Z., Li, Y., Jiao, L., Wang, M.: A new method for searching optimal differential and linear trails in arx ciphers. Cryptology ePrint Archive, Report 2019/1438
(2019), https://eprint.iacr.org/2019/1438
19. Liu, Z., Li, Y., Wang, M.: Optimal differential trails in simon-like ciphers. IACR
Trans. Symmetric Cryptol. 2017(1), 358–379 (2017)
20. Liu, Z., Li, Y., Wang, M.: The security of simon-like ciphers against linear cryptanalysis. IACR Cryptology ePrint Archive 2017, 576 (2017)
21. Matsui, M.: Linear cryptanalysis method for DES cipher. In: Advances in Cryptology - EUROCRYPT ’93, Workshop on the Theory and Application of of Cryptographic Techniques, Lofthus, Norway, May 23-27, 1993, Proceedings. pp. 386–397
(1993), https://doi.org/10.1007/3-540-48285-7 33
22. Matsui, M.: On correlation between the order of s-boxes and the strength of DES.
In: Advances in Cryptology - EUROCRYPT ’94, Workshop on the Theory and Application of Cryptographic Techniques, Perugia, Italy, May 9-12, 1994, Proceedings.
pp. 366–375 (1994), https://doi.org/10.1007/BFb0053451
23. Mella, S., Daemen, J., Assche, G.V.: New techniques for trail bounds and application to differential trails in keccak. IACR Trans. Symmetric Cryptol. 2017(1),
329–357 (2017), https://doi.org/10.13154/tosc.v2017.i1.329-357
24. Mouha, N.: Chaskey: a MAC algorithm for microcontrollers - status update and
proposal of chaskey-12 -. IACR Cryptology ePrint Archive 2015, 1182 (2015)
25. Mouha, N., Mennink, B., Herrewege, A.V., Watanabe, D., Preneel, B., Verbauwhede, I.: Chaskey: An efficient MAC algorithm for 32-bit microcontrollers.
In: Selected Areas in Cryptography - SAC 2014 - 21st International Conference,
Montreal, QC, Canada, August 14-15, 2014, Revised Selected Papers. pp. 306–323
(2014), https://doi.org/10.1007/978-3-319-13051-4 19

24

Huang et al.

26. Nyberg, K.: Linear approximation of block ciphers. In: Advances in Cryptology
- EUROCRYPT ’94, Workshop on the Theory and Application of Cryptographic
Techniques, Perugia, Italy, May 9-12, 1994, Proceedings. pp. 439–444 (1994)
27. Nyberg, K., Wallén, J.: Improved linear distinguishers for SNOW 2.0. In: Fast Software Encryption, 13th International Workshop, FSE 2006, Graz, Austria, March
15-17, 2006, Revised Selected Papers. pp. 144–162 (2006)
28. Schulte-Geers, E.: On ccz-equivalence of addition mod 2 n. Des. Codes Cryptography 66(1-3), 111–127 (2013), https://doi.org/10.1007/s10623-012-9668-4
29. Song, L., Huang, Z., Yang, Q.: Automatic differential analysis of arx block ciphers
with application to speck and lea. In: Australasian Conference on Information
Security and Privacy. pp. 379–394. Springer (2016)
30. Wallén, J.: Linear approximations of addition modulo 2n . In: Fast Software Encryption, 10th International Workshop, FSE2003, Lund, Sweden, February 24-26,
2003, Revised Papers. pp. 261–273 (2003)
31. Wallén, J.: On the differential and linear properties of addition. Master’s thesis,
Helsinki University of Technology, Laboratory for Theoretical Computer Science
(2003), http://www.tcs.hut.fi/Publications/bibdb/HUT-TCS-A84.pdf
32. Yao, Y., Zhang, B., Wu, W.: Automatic search for linear trails of the SPECK family. In: Information Security - 18th International Conference, ISC 2015, Trondheim,
Norway, September 9-11, 2015, Proceedings. pp. 158–176 (2015)

